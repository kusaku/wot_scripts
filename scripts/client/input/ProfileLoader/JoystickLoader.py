# Embedded file name: scripts/client/input/ProfileLoader/JoystickLoader.py
from Curve import Curve, Curve2
from MathExt import clamp
import Math
from db.DBHelpers import readValue, writeValue

class JoystickSettings:

    def __init__(self, section):
        self.readDataFromSection(section)

    def readDataFromSection(self, section):
        readValue(self, section, 'SLIP_COMPENSATION', True)
        readValue(self, section, 'JOY_VERSION_SWITCHER', False)
        readValue(self, section, 'SLIP_COMPENSATION_VALUE', 1.0)
        readValue(self, section, 'INERTIA_CAMERA', 1.0)
        readValue(self, section, 'INERTIA_CAMERA_ROLL', 1.0)
        readValue(self, section, 'HATKA_MOVE_SPEED', 0.0)
        readValue(self, section, 'INVERT_Y', 0)
        X = Curve2([Math.Vector2(0, 0), Math.Vector2(0.5, 0.5), Math.Vector2(1, 1)], 100)
        readValue(self, section, 'AXIS_X_CURVE', X)
        Y = Curve2([Math.Vector2(0, 0), Math.Vector2(0.5, 0.5), Math.Vector2(1, 1)], 100)
        readValue(self, section, 'AXIS_Y_CURVE', Y)
        Z = Curve2([Math.Vector2(0, 0), Math.Vector2(0.5, 0.5), Math.Vector2(1, 1)], 100)
        readValue(self, section, 'AXIS_Z_CURVE', Z)
        readValue(self, section, 'IS_CAMERA_FREEZ_ENABLED', False)
        self.readMappingData(section)

    def readMappingData(self, section):
        readValue(self, section, 'ROLL_AXIS', 0)
        self.ROLL_DEVICE = section.readInt64('ROLL_DEVICE', 0)
        readValue(self, section, 'INVERT_ROLL', 0)
        readValue(self, section, 'ROLL_SENSITIVITY', 0.0)
        readValue(self, section, 'ROLL_DEAD_ZONE', 0.05)
        readValue(self, section, 'ROLL_SMOOTH_WINDOW', 0.1)
        readValue(self, section, 'VERTICAL_AXIS', 2)
        self.VERTICAL_DEVICE = section.readInt64('VERTICAL_DEVICE', 0)
        readValue(self, section, 'INVERT_VERTICAL', 0)
        readValue(self, section, 'VERTICAL_SENSITIVITY', 0.0)
        readValue(self, section, 'VERTICAL_DEAD_ZONE', 0.05)
        readValue(self, section, 'VERTICAL_SMOOTH_WINDOW', 0.1)
        readValue(self, section, 'SENSITIVITY_IN_SNIPER_MODE', 1.0)
        readValue(self, section, 'FORCE_AXIS', 1)
        self.FORCE_DEVICE = section.readInt64('FORCE_DEVICE', 0)
        readValue(self, section, 'INVERT_FORCE', 0)
        readValue(self, section, 'FORCE_SENSITIVITY', 0.0)
        readValue(self, section, 'FORCE_SMOOTH_WINDOW', 0.1)
        readValue(self, section, 'POINT_OF_DEAD_ZONE', 1.0)
        self.FORCE_DEAD_ZONE = self.POINT_OF_DEAD_ZONE
        readValue(self, section, 'POINT_OF_NORMAL_THRUST', 0.0)
        readValue(self, section, 'HORIZONTAL_AXIS', 3)
        self.HORIZONTAL_DEVICE = section.readInt64('HORIZONTAL_DEVICE', 0)
        readValue(self, section, 'INVERT_HORIZONTAL', 0)
        readValue(self, section, 'HORIZONTAL_SENSITIVITY', 0.0)
        readValue(self, section, 'HORIZONTAL_DEAD_ZONE', 0.05)
        readValue(self, section, 'HORIZONTAL_SMOOTH_WINDOW', 0.1)
        readValue(self, section, 'FREE_HORIZONTAL_CAM_GAMEPAD_AXIS', 3)
        self.FREE_HORIZONTAL_CAM_GAMEPAD_DEVICE = section.readInt64('FREE_HORIZONTAL_CAM_GAMEPAD_DEVICE', 0)
        readValue(self, section, 'INVERT_FREE_HORIZONTAL_CAM_GAMEPAD', 0)
        readValue(self, section, 'FREE_HORIZONTAL_CAM_GAMEPAD_SENSITIVITY', 0.8)
        readValue(self, section, 'FREE_HORIZONTAL_CAM_GAMEPAD_DEAD_ZONE', 0.2)
        readValue(self, section, 'FREE_HORIZONTAL_CAM_GAMEPAD_SMOOTH_WINDOW', 0.7)
        readValue(self, section, 'FREE_VERTICAL_CAM_GAMEPAD_AXIS', 3)
        self.FREE_VERTICAL_CAM_GAMEPAD_DEVICE = section.readInt64('FREE_VERTICAL_CAM_GAMEPAD_DEVICE', 0)
        readValue(self, section, 'INVERT_FREE_VERTICAL_CAM_GAMEPAD', 0)
        readValue(self, section, 'FREE_VERTICAL_CAM_GAMEPAD_SENSITIVITY', 0.8)
        readValue(self, section, 'FREE_VERTICAL_CAM_GAMEPAD_DEAD_ZONE', 0.2)
        readValue(self, section, 'FREE_VERTICAL_CAM_GAMEPAD_SMOOTH_WINDOW', 0.7)

    def flash(self, rootSection):
        rootSection.writeFloat('INERTIA_CAMERA', self.INERTIA_CAMERA)
        rootSection.writeFloat('HATKA_MOVE_SPEED', self.HATKA_MOVE_SPEED)
        rootSection.writeFloat('INERTIA_CAMERA_ROLL', self.INERTIA_CAMERA_ROLL)
        rootSection.writeBool('SLIP_COMPENSATION', self.SLIP_COMPENSATION)
        rootSection.writeFloat('SLIP_COMPENSATION_VALUE', self.SLIP_COMPENSATION_VALUE)
        rootSection.writeBool('JOY_VERSION_SWITCHER', self.JOY_VERSION_SWITCHER)
        rootSection.writeInt('INVERT_Y', self.INVERT_Y)
        rootSection.writeInt('ROLL_AXIS', self.ROLL_AXIS)
        rootSection.writeInt64('ROLL_DEVICE', self.ROLL_DEVICE)
        rootSection.writeInt('INVERT_ROLL', self.INVERT_ROLL)
        rootSection.writeFloat('ROLL_SENSITIVITY', self.ROLL_SENSITIVITY)
        rootSection.writeFloat('ROLL_DEAD_ZONE', self.ROLL_DEAD_ZONE)
        rootSection.writeFloat('ROLL_SMOOTH_WINDOW', self.ROLL_SMOOTH_WINDOW)
        rootSection.writeInt('VERTICAL_AXIS', self.VERTICAL_AXIS)
        rootSection.writeInt64('VERTICAL_DEVICE', self.VERTICAL_DEVICE)
        rootSection.writeInt('INVERT_VERTICAL', self.INVERT_VERTICAL)
        rootSection.writeFloat('VERTICAL_SENSITIVITY', self.VERTICAL_SENSITIVITY)
        rootSection.writeFloat('VERTICAL_DEAD_ZONE', self.VERTICAL_DEAD_ZONE)
        rootSection.writeFloat('VERTICAL_SMOOTH_WINDOW', self.VERTICAL_SMOOTH_WINDOW)
        rootSection.writeFloat('SENSITIVITY_IN_SNIPER_MODE', self.SENSITIVITY_IN_SNIPER_MODE)
        rootSection.writeInt('FORCE_AXIS', self.FORCE_AXIS)
        rootSection.writeInt64('FORCE_DEVICE', self.FORCE_DEVICE)
        rootSection.writeInt('INVERT_FORCE', self.INVERT_FORCE)
        rootSection.writeFloat('FORCE_SENSITIVITY', self.FORCE_SENSITIVITY)
        rootSection.writeFloat('FORCE_DEAD_ZONE', self.FORCE_DEAD_ZONE)
        if rootSection.has_key('POINT_OF_DEAD_ZONE'):
            rootSection.deleteSection('POINT_OF_DEAD_ZONE')
        if rootSection.has_key('POINT_OF_DEAD_ZONE'):
            rootSection.deleteSection('POINT_OF_DEAD_ZONE')
        rootSection.writeFloat('POINT_OF_DEAD_ZONE', self.FORCE_DEAD_ZONE)
        rootSection.writeFloat('POINT_OF_NORMAL_THRUST', self.POINT_OF_NORMAL_THRUST)
        rootSection.writeInt('HORIZONTAL_AXIS', self.HORIZONTAL_AXIS)
        rootSection.writeInt64('HORIZONTAL_DEVICE', self.HORIZONTAL_DEVICE)
        rootSection.writeInt('INVERT_HORIZONTAL', self.INVERT_HORIZONTAL)
        rootSection.writeFloat('HORIZONTAL_SENSITIVITY', self.HORIZONTAL_SENSITIVITY)
        rootSection.writeFloat('HORIZONTAL_DEAD_ZONE', self.HORIZONTAL_DEAD_ZONE)
        rootSection.writeFloat('HORIZONTAL_SMOOTH_WINDOW', self.HORIZONTAL_SMOOTH_WINDOW)
        rootSection.writeBool('IS_CAMERA_FREEZ_ENABLED', self.IS_CAMERA_FREEZ_ENABLED)
        writeValue(self, rootSection, 'AXIS_X_CURVE', Curve2)
        writeValue(self, rootSection, 'AXIS_Y_CURVE', Curve2)
        writeValue(self, rootSection, 'AXIS_Z_CURVE', Curve2)
        rootSection.writeInt('FREE_HORIZONTAL_CAM_GAMEPAD_AXIS', self.FREE_HORIZONTAL_CAM_GAMEPAD_AXIS)
        rootSection.writeInt64('FREE_HORIZONTAL_CAM_GAMEPAD_DEVICE', self.FREE_HORIZONTAL_CAM_GAMEPAD_DEVICE)
        rootSection.writeInt('INVERT_FREE_HORIZONTAL_CAM_GAMEPAD', self.INVERT_FREE_HORIZONTAL_CAM_GAMEPAD)
        rootSection.writeFloat('FREE_HORIZONTAL_CAM_GAMEPAD_SENSITIVITY', self.FREE_HORIZONTAL_CAM_GAMEPAD_SENSITIVITY)
        rootSection.writeFloat('FREE_HORIZONTAL_CAM_GAMEPAD_DEAD_ZONE', self.FREE_HORIZONTAL_CAM_GAMEPAD_DEAD_ZONE)
        rootSection.writeInt('FREE_VERTICAL_CAM_GAMEPAD_AXIS', self.FREE_VERTICAL_CAM_GAMEPAD_AXIS)
        rootSection.writeInt64('FREE_VERTICAL_CAM_GAMEPAD_DEVICE', self.FREE_VERTICAL_CAM_GAMEPAD_DEVICE)
        rootSection.writeInt('INVERT_FREE_VERTICAL_CAM_GAMEPAD', self.INVERT_FREE_VERTICAL_CAM_GAMEPAD)
        rootSection.writeFloat('FREE_VERTICAL_CAM_GAMEPAD_SENSITIVITY', self.FREE_VERTICAL_CAM_GAMEPAD_SENSITIVITY)
        rootSection.writeFloat('FREE_VERTICAL_CAM_GAMEPAD_DEAD_ZONE', self.FREE_VERTICAL_CAM_GAMEPAD_DEAD_ZONE)

    def isYInverted(self):
        return self.INVERT_Y != self.INVERT_VERTICAL