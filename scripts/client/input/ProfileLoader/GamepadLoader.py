# Embedded file name: scripts/client/input/ProfileLoader/GamepadLoader.py
from Curve import Curve2
import Math
from db.DBHelpers import readValue, readValueOnCondition, writeValue

class GamepadProfileLoader:

    def __init__(self, section):
        readValueOnCondition(self, section, 'CAMERA_TYPE', cameraTypeCondition, default=0)
        readValue(self, section, 'RADIUS_OF_CONDUCTING', 1.0)
        readValue(self, section, 'AUTOMATIC_FLAPS', True)
        readValue(self, section, 'CAMERA_FLEXIBILITY', 1.0)
        readValue(self, section, 'EQUALIZER_ZONE_SIZE', 0.75)
        readValue(self, section, 'ROLL_SPEED_CFC', 1.0)
        readValue(self, section, 'EQUALIZER_FORCE', 1.0)
        readValue(self, section, 'SHIFT_TURN', True)
        readValue(self, section, 'SAFE_ROLL_ON_LOW_ALTITUDE', True)
        readValue(self, section, 'CAMERA_ACCELERATION', 0.0)
        readValue(self, section, 'CAMERA_ROLL_SPEED', 1.0)
        readValue(self, section, 'CAMERA_ANGLE', 1.0)
        self.readDataFromSection(section)

    def readDataFromSection(self, section):
        readValue(self, section, 'ALLOW_LEAD', 0)
        readValue(self, section, 'SPEED_POINTER', 0.5)
        readValue(self, section, 'SENSITIVITY', 0.5)
        readValue(self, section, 'SLIP_COMPENSATION', True)
        readValue(self, section, 'SLIP_COMPENSATION_VALUE', 1.0)
        readValue(self, section, 'INVERT_Y', 0)
        readValue(self, section, 'AXIS_X_CURVE', Curve2([Math.Vector2(0, 0), Math.Vector2(0.5, 0.5), Math.Vector2(1, 1)], 100))
        readValue(self, section, 'AXIS_Y_CURVE', Curve2([Math.Vector2(0, 0), Math.Vector2(0.5, 0.5), Math.Vector2(1, 1)], 100))
        readValue(self, section, 'AXIS_Z_CURVE', Curve2([Math.Vector2(0, 0), Math.Vector2(0.5, 0.5), Math.Vector2(1, 1)], 100))
        readValue(self, section, 'IS_CAMERA_FREEZ_ENABLED', False)
        self.readMappingData(section)

    def readMappingData(self, section):
        readValue(self, section, 'ROLL_AXIS', 0)
        self.ROLL_DEVICE = section.readInt64('ROLL_DEVICE', 0)
        readValue(self, section, 'INVERT_ROLL', 0)
        readValue(self, section, 'ROLL_SENSITIVITY', 1.0)
        readValue(self, section, 'ROLL_DEAD_ZONE', 0.05)
        readValue(self, section, 'ROLL_SMOOTH_WINDOW', 0.0)
        readValue(self, section, 'G_VERTICAL_AXIS', 2)
        self.G_VERTICAL_DEVICE = section.readInt64('G_VERTICAL_DEVICE', 0)
        readValue(self, section, 'INVERT_G_VERTICAL', 0)
        readValue(self, section, 'G_VERTICAL_SENSITIVITY', 0.0)
        readValue(self, section, 'G_VERTICAL_DEAD_ZONE', 0.05)
        readValue(self, section, 'G_VERTICAL_SMOOTH_WINDOW', 0.0)
        readValue(self, section, 'VERTICAL_AXIS', 2)
        self.VERTICAL_DEVICE = section.readInt64('VERTICAL_DEVICE', 0)
        readValue(self, section, 'INVERT_VERTICAL', 0)
        readValue(self, section, 'VERTICAL_SENSITIVITY', 1.0)
        readValue(self, section, 'VERTICAL_DEAD_ZONE', 0.05)
        readValue(self, section, 'VERTICAL_SMOOTH_WINDOW', 0.0)
        readValue(self, section, 'FORCE_AXIS', 1)
        self.FORCE_DEVICE = section.readInt64('FORCE_DEVICE', 0)
        readValue(self, section, 'INVERT_FORCE', 0)
        readValue(self, section, 'FORCE_SENSITIVITY', 0.0)
        readValue(self, section, 'FORCE_DEAD_ZONE', 0.05)
        readValue(self, section, 'POINT_OF_NORMAL_THRUST', 0.0)
        readValue(self, section, 'FORCE_SMOOTH_WINDOW', 0.0)
        readValue(self, section, 'G_HORIZONTAL_AXIS', 3)
        self.G_HORIZONTAL_DEVICE = section.readInt64('G_HORIZONTAL_DEVICE', 0)
        readValue(self, section, 'INVERT_G_HORIZONTAL', 0)
        readValue(self, section, 'G_HORIZONTAL_SENSITIVITY', 0.0)
        readValue(self, section, 'G_HORIZONTAL_DEAD_ZONE', 0.05)
        readValue(self, section, 'G_HORIZONTAL_SMOOTH_WINDOW', 0.0)
        readValue(self, section, 'FREE_HORIZONTAL_CAM_GAMEPAD_AXIS', 3)
        self.FREE_HORIZONTAL_CAM_GAMEPAD_DEVICE = section.readInt64('FREE_HORIZONTAL_CAM_GAMEPAD_DEVICE', 0)
        readValue(self, section, 'INVERT_FREE_HORIZONTAL_CAM_GAMEPAD', 0)
        readValue(self, section, 'FREE_HORIZONTAL_CAM_GAMEPAD_SENSITIVITY', 0.0)
        readValue(self, section, 'FREE_HORIZONTAL_CAM_GAMEPAD_DEAD_ZONE', 0.05)
        readValue(self, section, 'FREE_HORIZONTAL_CAM_GAMEPAD_SMOOTH_WINDOW', 0.0)
        readValue(self, section, 'FREE_VERTICAL_CAM_GAMEPAD_AXIS', 3)
        self.FREE_VERTICAL_CAM_GAMEPAD_DEVICE = section.readInt64('FREE_VERTICAL_CAM_GAMEPAD_DEVICE', 0)
        readValue(self, section, 'INVERT_FREE_VERTICAL_CAM_GAMEPAD', 0)
        readValue(self, section, 'FREE_VERTICAL_CAM_GAMEPAD_SENSITIVITY', 0.0)
        readValue(self, section, 'FREE_VERTICAL_CAM_GAMEPAD_DEAD_ZONE', 0.05)
        readValue(self, section, 'FREE_VERTICAL_CAM_GAMEPAD_SMOOTH_WINDOW', 0.0)
        readValue(self, section, 'HORIZONTAL_AXIS', 3)
        self.HORIZONTAL_DEVICE = section.readInt64('HORIZONTAL_DEVICE', 0)
        readValue(self, section, 'INVERT_HORIZONTAL', 0)
        readValue(self, section, 'HORIZONTAL_SENSITIVITY', 1.0)
        readValue(self, section, 'HORIZONTAL_DEAD_ZONE', 0.05)
        readValue(self, section, 'HORIZONTAL_SMOOTH_WINDOW', 0.0)

    def flash(self, rootSection):
        rootSection.writeInt('ALLOW_LEAD', self.ALLOW_LEAD)
        rootSection.writeFloat('SPEED_POINTER', self.SPEED_POINTER)
        rootSection.writeFloat('SENSITIVITY', self.SENSITIVITY)
        rootSection.writeInt('CAMERA_TYPE', self.CAMERA_TYPE)
        rootSection.writeFloat('RADIUS_OF_CONDUCTING', self.RADIUS_OF_CONDUCTING)
        rootSection.writeBool('AUTOMATIC_FLAPS', self.AUTOMATIC_FLAPS)
        rootSection.writeFloat('CAMERA_FLEXIBILITY', self.CAMERA_FLEXIBILITY)
        rootSection.writeFloat('EQUALIZER_ZONE_SIZE', self.EQUALIZER_ZONE_SIZE)
        rootSection.writeFloat('ROLL_SPEED_CFC', self.ROLL_SPEED_CFC)
        rootSection.writeFloat('EQUALIZER_FORCE', self.EQUALIZER_FORCE)
        rootSection.writeBool('SHIFT_TURN', self.SHIFT_TURN)
        rootSection.writeBool('SAFE_ROLL_ON_LOW_ALTITUDE', self.SAFE_ROLL_ON_LOW_ALTITUDE)
        rootSection.writeFloat('CAMERA_ACCELERATION', self.CAMERA_ACCELERATION)
        rootSection.writeFloat('CAMERA_ROLL_SPEED', self.CAMERA_ROLL_SPEED)
        rootSection.writeFloat('CAMERA_ANGLE', self.CAMERA_ANGLE)
        rootSection.writeBool('SLIP_COMPENSATION', self.SLIP_COMPENSATION)
        rootSection.writeFloat('SLIP_COMPENSATION_VALUE', self.SLIP_COMPENSATION_VALUE)
        rootSection.writeInt('INVERT_Y', self.INVERT_Y)
        rootSection.writeInt('ROLL_AXIS', self.ROLL_AXIS)
        rootSection.writeInt64('ROLL_DEVICE', self.ROLL_DEVICE)
        rootSection.writeInt('INVERT_ROLL', self.INVERT_ROLL)
        rootSection.writeFloat('ROLL_SENSITIVITY', self.ROLL_SENSITIVITY)
        rootSection.writeFloat('ROLL_DEAD_ZONE', self.ROLL_DEAD_ZONE)
        rootSection.writeInt('G_VERTICAL_AXIS', self.G_VERTICAL_AXIS)
        rootSection.writeInt64('G_VERTICAL_DEVICE', self.G_VERTICAL_DEVICE)
        rootSection.writeInt('INVERT_G_VERTICAL', self.INVERT_G_VERTICAL)
        rootSection.writeFloat('G_VERTICAL_SENSITIVITY', self.G_VERTICAL_SENSITIVITY)
        rootSection.writeFloat('G_VERTICAL_DEAD_ZONE', self.G_VERTICAL_DEAD_ZONE)
        rootSection.writeInt('VERTICAL_AXIS', self.VERTICAL_AXIS)
        rootSection.writeInt64('VERTICAL_DEVICE', self.VERTICAL_DEVICE)
        rootSection.writeInt('INVERT_VERTICAL', self.INVERT_VERTICAL)
        rootSection.writeFloat('VERTICAL_SENSITIVITY', self.VERTICAL_SENSITIVITY)
        rootSection.writeFloat('VERTICAL_DEAD_ZONE', self.VERTICAL_DEAD_ZONE)
        rootSection.writeInt('FORCE_AXIS', self.FORCE_AXIS)
        rootSection.writeInt64('FORCE_DEVICE', self.FORCE_DEVICE)
        rootSection.writeInt('INVERT_FORCE', self.INVERT_FORCE)
        rootSection.writeFloat('FORCE_SENSITIVITY', self.FORCE_SENSITIVITY)
        rootSection.writeFloat('FORCE_DEAD_ZONE', self.FORCE_DEAD_ZONE)
        rootSection.writeFloat('POINT_OF_NORMAL_THRUST', self.POINT_OF_NORMAL_THRUST)
        rootSection.writeInt('G_HORIZONTAL_AXIS', self.G_HORIZONTAL_AXIS)
        rootSection.writeInt64('G_HORIZONTAL_DEVICE', self.G_HORIZONTAL_DEVICE)
        rootSection.writeInt('INVERT_G_HORIZONTAL', self.INVERT_G_HORIZONTAL)
        rootSection.writeFloat('G_HORIZONTAL_SENSITIVITY', self.G_HORIZONTAL_SENSITIVITY)
        rootSection.writeFloat('G_HORIZONTAL_DEAD_ZONE', self.G_HORIZONTAL_DEAD_ZONE)
        rootSection.writeInt('FREE_HORIZONTAL_CAM_GAMEPAD_AXIS', self.FREE_HORIZONTAL_CAM_GAMEPAD_AXIS)
        rootSection.writeInt64('FREE_HORIZONTAL_CAM_GAMEPAD_DEVICE', self.FREE_HORIZONTAL_CAM_GAMEPAD_DEVICE)
        rootSection.writeInt('INVERT_FREE_HORIZONTAL_CAM_GAMEPAD', self.INVERT_FREE_HORIZONTAL_CAM_GAMEPAD)
        rootSection.writeFloat('FREE_HORIZONTAL_CAM_GAMEPAD_SENSITIVITY', self.FREE_HORIZONTAL_CAM_GAMEPAD_SENSITIVITY)
        rootSection.writeFloat('FREE_HORIZONTAL_CAM_GAMEPAD_DEAD_ZONE', self.FREE_HORIZONTAL_CAM_GAMEPAD_DEAD_ZONE)
        rootSection.writeInt('FREE_VERTICAL_CAM_GAMEPAD_AXIS', self.FREE_VERTICAL_CAM_GAMEPAD_AXIS)
        rootSection.writeInt64('FREE_VERTICAL_CAM_GAMEPAD_DEVICE', self.FREE_VERTICAL_CAM_GAMEPAD_DEVICE)
        rootSection.writeInt('INVERT_FREE_VERTICAL_CAM_GAMEPAD', self.INVERT_FREE_VERTICAL_CAM_GAMEPAD)
        rootSection.writeFloat('FREE_VERTICAL_CAM_GAMEPAD_SENSITIVITY', self.FREE_VERTICAL_CAM_GAMEPAD_SENSITIVITY)
        rootSection.writeFloat('FREE_VERTICAL_CAM_GAMEPAD_DEAD_ZONE', self.FREE_VERTICAL_CAM_GAMEPAD_DEAD_ZONE)
        rootSection.writeInt('HORIZONTAL_AXIS', self.HORIZONTAL_AXIS)
        rootSection.writeInt64('HORIZONTAL_DEVICE', self.HORIZONTAL_DEVICE)
        rootSection.writeInt('INVERT_HORIZONTAL', self.INVERT_HORIZONTAL)
        rootSection.writeFloat('HORIZONTAL_SENSITIVITY', self.HORIZONTAL_SENSITIVITY)
        rootSection.writeFloat('HORIZONTAL_DEAD_ZONE', self.HORIZONTAL_DEAD_ZONE)
        rootSection.writeBool('IS_CAMERA_FREEZ_ENABLED', self.IS_CAMERA_FREEZ_ENABLED)
        writeValue(self, rootSection, 'AXIS_X_CURVE', Curve2)
        writeValue(self, rootSection, 'AXIS_Y_CURVE', Curve2)
        writeValue(self, rootSection, 'AXIS_Z_CURVE', Curve2)
        rootSection.writeFloat('FORCE_DEAD_ZONE', self.FORCE_DEAD_ZONE)


def cameraTypeCondition(value):
    if value in (0, 2):
        return True
    raise Exception, "GamePadLoader: can't correctly read CAMERA_TYPE from xml"