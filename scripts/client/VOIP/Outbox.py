# Embedded file name: scripts/client/VOIP/Outbox.py
import BigWorld
import consts
from wofdecorators import noexcept
from debug_utils import verify, LOG_TRACE, LOG_ERROR
from OperationCodes import OPERATION_CODE

class Outbox:
    """ Helper class allowing the VOIP package to send requests or messages to the game-specific "outside world".
    
        COMMON NOTE:
        Depending on current context, BigWorld.player() can be either a PlayerAccount or a PlayerAvatar.
        So, both of these must implement all necessary methods for client-server communication.
    """

    def requestInitData(self, callback):
        verify(callback is not None)
        LOG_TRACE('sending VOIP init data request')
        BigWorld.player().sendOperation(OPERATION_CODE.CMD_VOIP_GET_INIT_DATA, callback)
        return

    @noexcept
    def sendRequest(self, requestID, channelType = None, channelName = None):
        """ Send a generic VOIP-specific request to the Game Server.
        
        @param requestID:   member of consts.VOIP.CLIENT_REQUESTS
        @param channelType: None or one of consts.VOIP.CHANNELTYPE_XXX
        @param channelName: None or unique channel name (generated by game server)
        """
        BigWorld.player().voipClientStatus(channelType if channelType is not None else -1, channelName or '', requestID)
        return

    @noexcept
    def sendMuteListChange(self, dbid, muted):
        """ Notify server about local changes in player's personal mute-list.
        
        @param dbid:  database ID of another player, whom we've just muted or un-muted
        @param muted: True to mute the player, False to un-mute
        """
        BigWorld.player().voipMuteClient(dbid, muted)

    @noexcept
    def sendSquadChannelStatus(self, squadID, channelEnabled):
        """ Request squad channel creation or deletion from the Game Server.
            Any squad member can create the channel, but delete requests
            will only be serviced if sent by the squad leader.
        
        @param squadID:        squad ID known to the Game Server
        @param channelEnabled: True to create the channel, False to delete it
        """
        BigWorld.player().voipSquadStatus(squadID, channelEnabled)

    @noexcept
    def sendSquadronChannelStatus(self, squadronID, channelEnabled):
        """ Request squadron channel creation or deletion from the Game Server.
            Any squadron member can create the channel, but delete requests
            will only be serviced if sent by the squadron leader.
        
        @param squadronID:     squadron ID known to the Game Server
        @param channelEnabled: True to create the channel, False to delete it
        """
        raise NotImplementedError

    @noexcept
    def visualizeMemberState(self, dbid, iconID, muted, observerType, observer):
        """ Request refresh of a member state (silent/talking/...) icon in GUI.
        
        @param dbid:         database ID of a voice channel member
        @param iconID:       state icon ID - member of clientconsts.VOIP_ICON_TYPES
        @param muted:        is member currently in our mute list (may be used for context menus and such)
        @param observerType: member of consts.VOIP.MEMBER_STATUS_OBSERVER_TYPES
        @param observer:     data specific to observerType (see implementation)
        """
        if observerType == consts.VOIP.MEMBER_STATUS_OBSERVER_TYPES.LOBBY_SQUAD_PANEL:
            from gui.WindowsManager import g_windowsManager
            if g_windowsManager.getLobbyUI() is not None:
                from gui.Scaleform.windows import CustomObject
                args = CustomObject()
                args.dbid = str(dbid)
                args.state = iconID
                g_windowsManager.getLobbyUI().call_1(observer, args)
            else:
                LOG_TRACE('no lobby!')
        elif observerType == consts.VOIP.MEMBER_STATUS_OBSERVER_TYPES.ARENA_HUD:
            if dbid in observer:
                avatarID = observer[dbid]
                from gui.WindowsManager import g_windowsManager
                gui = g_windowsManager.getBattleUI()
                if gui:
                    LOG_TRACE('refreshing battle UI...')
                    gui.onPlayerChangeSpeakIconState(avatarID, iconID, muted)
                else:
                    LOG_ERROR('no battle UI!')
            else:
                LOG_ERROR('unknown dbid %d' % dbid)
        else:
            LOG_ERROR('visualizeMemberState - invalid observer type {0}'.format(observerType))
        return

    @noexcept
    def setMasterVolumeMultiplier(self, volumeMul):
        """ Request change of game-wide sound master volume.
            Volume is set to global game setting multiplied by specified value.
        
        @param volumeMul: volume multiplier (0.0 to 1.0)
        """
        from audio import GameSound
        GameSound().setVolumeAmplifier(volumeMul)


class DisabledOutbox:
    """ An empty version of Outbox, used during finalization process
        to make sure nothing gets out and breaks something when we don't expect it.
    """

    def requestInitData(self, callback):
        pass

    def sendRequest(self, channelType, channelName = None, requestID = None):
        pass

    def sendMuteListChange(self, dbid, muted):
        pass

    def sendSquadChannelStatus(self, squadID, channelEnabled):
        pass

    def sendSquadronChannelStatus(self, squadID, channelEnabled):
        pass

    def visualizeMemberState(self, dbid, iconID, muted, observerType, observer):
        pass

    def setMasterVolumeMultiplier(self, volumeMul):
        pass