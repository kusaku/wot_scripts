# Embedded file name: scripts/common/Lib/test/test_long_future.py
from __future__ import division
import sys
import random
import math
import unittest
from test.test_support import run_unittest
requires_IEEE_754 = unittest.skipUnless(float.__getformat__('double').startswith('IEEE'), 'test requires IEEE 754 doubles')
DBL_MAX = sys.float_info.max
DBL_MAX_EXP = sys.float_info.max_exp
DBL_MIN_EXP = sys.float_info.min_exp
DBL_MANT_DIG = sys.float_info.mant_dig
DBL_MIN_OVERFLOW = 2 ** DBL_MAX_EXP - 2 ** (DBL_MAX_EXP - DBL_MANT_DIG - 1)

def truediv(a, b):
    """Correctly-rounded true division for integers."""
    negative = a ^ b < 0
    a, b = abs(a), abs(b)
    if not b:
        raise ZeroDivisionError('division by zero')
    if a >= DBL_MIN_OVERFLOW * b:
        raise OverflowError('int/int too large to represent as a float')
    d = a.bit_length() - b.bit_length()
    if d >= 0 and a >= 2 ** d * b or d < 0 and a * 2 ** (-d) >= b:
        d += 1
    exp = max(d, DBL_MIN_EXP) - DBL_MANT_DIG
    a, b = a << max(-exp, 0), b << max(exp, 0)
    q, r = divmod(a, b)
    if 2 * r > b or 2 * r == b and q % 2 == 1:
        q += 1
    result = math.ldexp(float(q), exp)
    if negative:
        return -result
    return result


class TrueDivisionTests(unittest.TestCase):

    def test(self):
        huge = 
        mhuge = -huge
        self.assertEqual(huge / huge, 1.0)
        self.assertEqual(mhuge / mhuge, 1.0)
        self.assertEqual(huge / mhuge, -1.0)
        self.assertEqual(mhuge / huge, -1.0)
        self.assertEqual(1 / huge, 0.0)
        self.assertEqual(1L / huge, 0.0)
        self.assertEqual(1 / mhuge, 0.0)
        self.assertEqual(1L / mhuge, 0.0)
        self.assertEqual((666 * huge + (huge >> 1)) / huge, 666.5)
        self.assertEqual((666 * mhuge + (mhuge >> 1)) / mhuge, 666.5)
        self.assertEqual((666 * huge + (huge >> 1)) / mhuge, -666.5)
        self.assertEqual((666 * mhuge + (mhuge >> 1)) / huge, -666.5)
        self.assertEqual(huge / (huge << 1), 0.5)
        self.assertEqual(1000000 * huge / huge, 1000000)
        namespace = {'huge': huge,
         'mhuge': mhuge}
        for overflow in ['float(huge)',
         'float(mhuge)',
         'huge / 1',
         'huge / 2L',
         'huge / -1',
         'huge / -2L',
         'mhuge / 100',
         'mhuge / 100L']:
            with self.assertRaises(OverflowError):
                eval(overflow, namespace)

        for underflow in ['1 / huge',
         '2L / huge',
         '-1 / huge',
         '-2L / huge',
         '100 / mhuge',
         '100L / mhuge']:
            result = eval(underflow, namespace)
            self.assertEqual(result, 0.0, 'expected underflow to 0 from {!r}'.format(underflow))

        for zero in ['huge / 0',
         'huge / 0L',
         'mhuge / 0',
         'mhuge / 0L']:
            with self.assertRaises(ZeroDivisionError):
                eval(zero, namespace)

    def check_truediv(self, a, b, skip_small = True):
        """Verify that the result of a/b is correctly rounded, by
        comparing it with a pure Python implementation of correctly
        rounded division.  b should be nonzero."""
        a, b = long(a), long(b)
        if skip_small and max(abs(a), abs(b)) < 2 ** DBL_MANT_DIG:
            return
        try:
            expected = repr(truediv(a, b))
        except OverflowError:
            expected = 'overflow'
        except ZeroDivisionError:
            expected = 'zerodivision'

        try:
            got = repr(a / b)
        except OverflowError:
            got = 'overflow'
        except ZeroDivisionError:
            got = 'zerodivision'

        self.assertEqual(expected, got, 'Incorrectly rounded division {}/{}: expected {}, got {}'.format(a, b, expected, got))

    @requires_IEEE_754
    def test_correctly_rounded_true_division(self):
        self.check_truediv(123, 0)
        self.check_truediv(-456, 0)
        self.check_truediv(0, 3)
        self.check_truediv(0, -3)
        self.check_truediv(0, 0)
        self.check_truediv(8283495 * 2 ** DBL_MAX_EXP, 12345)
        self.check_truediv(12345, 345678 * 2 ** (DBL_MANT_DIG - DBL_MIN_EXP))
        self.check_truediv(12345 * 1267650600228229401496703205376L, 98765)
        self.check_truediv(12345 * 1073741824, 98765 * 283753509180010707824461062763116716606126555757084586223347181136007L)
        bases = (0,
         DBL_MANT_DIG,
         DBL_MIN_EXP,
         DBL_MAX_EXP,
         DBL_MIN_EXP - DBL_MANT_DIG)
        for base in bases:
            for exp in range(base - 15, base + 15):
                self.check_truediv(75312 * 2 ** max(exp, 0), 69187 * 2 ** max(-exp, 0))
                self.check_truediv(69187 * 2 ** max(exp, 0), 75312 * 2 ** max(-exp, 0))

        for m in [1,
         2,
         7,
         17,
         12345,
         3234476509624757991344647769100216810857203198904625400933895331391691459636928060001L,
         -1,
         -2,
         -5,
         -23,
         -67891,
         -435705293158188780045492006945841798765480379972742781555000875455118595048362001L]:
            for n in range(-10, 10):
                self.check_truediv(m * DBL_MIN_OVERFLOW + n, m)
                self.check_truediv(m * DBL_MIN_OVERFLOW + n, -m)

        for n in range(250):
            self.check_truediv((2 ** DBL_MANT_DIG + 1) * 12345 * 1606938044258990275541962092341162602522202993782792835301376L + 2 ** n, 2 ** DBL_MANT_DIG * 12345)

        self.check_truediv(1, 2731)
        self.check_truediv(295147931372582273023L, 295147932265116303360L)
        for i in range(1000):
            self.check_truediv(10 ** (i + 1), 10 ** i)
            self.check_truediv(10 ** i, 10 ** (i + 1))

        for m in [1,
         2,
         4,
         7,
         8,
         16,
         17,
         32,
         12345,
         3234476509624757991344647769100216810857203198904625400933895331391691459636928060001L,
         -1,
         -2,
         -5,
         -23,
         -67891,
         -435705293158188780045492006945841798765480379972742781555000875455118595048362001L]:
            for n in range(-10, 10):
                self.check_truediv(2 ** DBL_MANT_DIG * m + n, m)

        for n in range(-20, 20):
            self.check_truediv(n, 809609013229242473409981386875669228198226599056568473427605432109721358271981387567841534805748497980748311457267247645559234949543173907468053599762954039686069697106265445457867630968372865364959070713890980274248029933698770794472413422596638225363240226049435078209333658460922010128745310034584025053230830964373979136L)

        for M in
            for i in range(1000):
                a = random.randrange(1, M)
                b = random.randrange(a, 2 * a + 1)
                self.check_truediv(a, b)
                self.check_truediv(-a, b)
                self.check_truediv(a, -b)
                self.check_truediv(-a, -b)

        for _ in range(10000):
            a_bits = random.randrange(1000)
            b_bits = random.randrange(1, 1000)
            x = random.randrange(2 ** a_bits)
            y = random.randrange(1, 2 ** b_bits)
            self.check_truediv(x, y)
            self.check_truediv(x, -y)
            self.check_truediv(-x, y)
            self.check_truediv(-x, -y)


def test_main():
    run_unittest(TrueDivisionTests)


if __name__ == '__main__':
    test_main()