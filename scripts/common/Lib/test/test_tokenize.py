# Embedded file name: scripts/common/Lib/test/test_tokenize.py
doctests = '\nTests for the tokenize module.\n\n    >>> import glob, random, sys\n\nThe tests can be really simple. Given a small fragment of source\ncode, print out a table with tokens. The ENDMARK is omitted for\nbrevity.\n\n    >>> dump_tokens("1 + 1")\n    NUMBER     \'1\'           (1, 0) (1, 1)\n    OP         \'+\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 4) (1, 5)\n\n    >>> dump_tokens("if False:\\n"\n    ...             "    # NL\\n"\n    ...             "    True = False # NEWLINE\\n")\n    NAME       \'if\'          (1, 0) (1, 2)\n    NAME       \'False\'       (1, 3) (1, 8)\n    OP         \':\'           (1, 8) (1, 9)\n    NEWLINE    \'\\n\'          (1, 9) (1, 10)\n    COMMENT    \'# NL\'        (2, 4) (2, 8)\n    NL         \'\\n\'          (2, 8) (2, 9)\n    INDENT     \'    \'        (3, 0) (3, 4)\n    NAME       \'True\'        (3, 4) (3, 8)\n    OP         \'=\'           (3, 9) (3, 10)\n    NAME       \'False\'       (3, 11) (3, 16)\n    COMMENT    \'# NEWLINE\'   (3, 17) (3, 26)\n    NEWLINE    \'\\n\'          (3, 26) (3, 27)\n    DEDENT     \'\'            (4, 0) (4, 0)\n\n    >>> indent_error_file = """\n    ... def k(x):\n    ...     x += 2\n    ...   x += 5\n    ... """\n\n    >>> for tok in generate_tokens(StringIO(indent_error_file).readline): pass\n    Traceback (most recent call last):\n        ...\n    IndentationError: unindent does not match any outer indentation level\n\nTest roundtrip for `untokenize`. `f` is an open file or a string. The source\ncode in f is tokenized, converted back to source code via tokenize.untokenize(),\nand tokenized again from the latter. The test fails if the second tokenization\ndoesn\'t match the first.\n\n    >>> def roundtrip(f):\n    ...     if isinstance(f, str): f = StringIO(f)\n    ...     token_list = list(generate_tokens(f.readline))\n    ...     f.close()\n    ...     tokens1 = [tok[:2] for tok in token_list]\n    ...     new_text = untokenize(tokens1)\n    ...     readline = iter(new_text.splitlines(1)).next\n    ...     tokens2 = [tok[:2] for tok in generate_tokens(readline)]\n    ...     return tokens1 == tokens2\n    ...\n\nThere are some standard formatting practices that are easy to get right.\n\n    >>> roundtrip("if x == 1:\\n"\n    ...           "    print x\\n")\n    True\n\n    >>> roundtrip("# This is a comment\\n# This also")\n    True\n\nSome people use different formatting conventions, which makes\nuntokenize a little trickier. Note that this test involves trailing\nwhitespace after the colon. Note that we use hex escapes to make the\ntwo trailing blanks apperant in the expected output.\n\n    >>> roundtrip("if x == 1 : \\n"\n    ...           "  print x\\n")\n    True\n\n    >>> f = test_support.findfile("tokenize_tests" + os.extsep + "txt")\n    >>> roundtrip(open(f))\n    True\n\n    >>> roundtrip("if x == 1:\\n"\n    ...           "    # A comment by itself.\\n"\n    ...           "    print x # Comment here, too.\\n"\n    ...           "    # Another comment.\\n"\n    ...           "after_if = True\\n")\n    True\n\n    >>> roundtrip("if (x # The comments need to go in the right place\\n"\n    ...           "    == 1):\\n"\n    ...           "    print \'x==1\'\\n")\n    True\n\n    >>> roundtrip("class Test: # A comment here\\n"\n    ...           "  # A comment with weird indent\\n"\n    ...           "  after_com = 5\\n"\n    ...           "  def x(m): return m*5 # a one liner\\n"\n    ...           "  def y(m): # A whitespace after the colon\\n"\n    ...           "     return y*4 # 3-space indent\\n")\n    True\n\nSome error-handling code\n\n    >>> roundtrip("try: import somemodule\\n"\n    ...           "except ImportError: # comment\\n"\n    ...           "    print \'Can not import\' # comment2\\n"\n    ...           "else:   print \'Loaded\'\\n")\n    True\n\nBalancing continuation\n\n    >>> roundtrip("a = (3,4, \\n"\n    ...           "5,6)\\n"\n    ...           "y = [3, 4,\\n"\n    ...           "5]\\n"\n    ...           "z = {\'a\': 5,\\n"\n    ...           "\'b\':15, \'c\':True}\\n"\n    ...           "x = len(y) + 5 - a[\\n"\n    ...           "3] - a[2]\\n"\n    ...           "+ len(z) - z[\\n"\n    ...           "\'b\']\\n")\n    True\n\nOrdinary integers and binary operators\n\n    >>> dump_tokens("0xff <= 255")\n    NUMBER     \'0xff\'        (1, 0) (1, 4)\n    OP         \'<=\'          (1, 5) (1, 7)\n    NUMBER     \'255\'         (1, 8) (1, 11)\n    >>> dump_tokens("0b10 <= 255")\n    NUMBER     \'0b10\'        (1, 0) (1, 4)\n    OP         \'<=\'          (1, 5) (1, 7)\n    NUMBER     \'255\'         (1, 8) (1, 11)\n    >>> dump_tokens("0o123 <= 0123")\n    NUMBER     \'0o123\'       (1, 0) (1, 5)\n    OP         \'<=\'          (1, 6) (1, 8)\n    NUMBER     \'0123\'        (1, 9) (1, 13)\n    >>> dump_tokens("01234567 > ~0x15")\n    NUMBER     \'01234567\'    (1, 0) (1, 8)\n    OP         \'>\'           (1, 9) (1, 10)\n    OP         \'~\'           (1, 11) (1, 12)\n    NUMBER     \'0x15\'        (1, 12) (1, 16)\n    >>> dump_tokens("2134568 != 01231515")\n    NUMBER     \'2134568\'     (1, 0) (1, 7)\n    OP         \'!=\'          (1, 8) (1, 10)\n    NUMBER     \'01231515\'    (1, 11) (1, 19)\n    >>> dump_tokens("(-124561-1) & 0200000000")\n    OP         \'(\'           (1, 0) (1, 1)\n    OP         \'-\'           (1, 1) (1, 2)\n    NUMBER     \'124561\'      (1, 2) (1, 8)\n    OP         \'-\'           (1, 8) (1, 9)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \')\'           (1, 10) (1, 11)\n    OP         \'&\'           (1, 12) (1, 13)\n    NUMBER     \'0200000000\'  (1, 14) (1, 24)\n    >>> dump_tokens("0xdeadbeef != -1")\n    NUMBER     \'0xdeadbeef\'  (1, 0) (1, 10)\n    OP         \'!=\'          (1, 11) (1, 13)\n    OP         \'-\'           (1, 14) (1, 15)\n    NUMBER     \'1\'           (1, 15) (1, 16)\n    >>> dump_tokens("0xdeadc0de & 012345")\n    NUMBER     \'0xdeadc0de\'  (1, 0) (1, 10)\n    OP         \'&\'           (1, 11) (1, 12)\n    NUMBER     \'012345\'      (1, 13) (1, 19)\n    >>> dump_tokens("0xFF & 0x15 | 1234")\n    NUMBER     \'0xFF\'        (1, 0) (1, 4)\n    OP         \'&\'           (1, 5) (1, 6)\n    NUMBER     \'0x15\'        (1, 7) (1, 11)\n    OP         \'|\'           (1, 12) (1, 13)\n    NUMBER     \'1234\'        (1, 14) (1, 18)\n\nLong integers\n\n    >>> dump_tokens("x = 0L")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'0L\'          (1, 4) (1, 6)\n    >>> dump_tokens("x = 0xfffffffffff")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'0xffffffffff (1, 4) (1, 17)\n    >>> dump_tokens("x = 123141242151251616110l")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'123141242151 (1, 4) (1, 26)\n    >>> dump_tokens("x = -15921590215012591L")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    OP         \'-\'           (1, 4) (1, 5)\n    NUMBER     \'159215902150 (1, 5) (1, 23)\n\nFloating point numbers\n\n    >>> dump_tokens("x = 3.14159")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'3.14159\'     (1, 4) (1, 11)\n    >>> dump_tokens("x = 314159.")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'314159.\'     (1, 4) (1, 11)\n    >>> dump_tokens("x = .314159")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'.314159\'     (1, 4) (1, 11)\n    >>> dump_tokens("x = 3e14159")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'3e14159\'     (1, 4) (1, 11)\n    >>> dump_tokens("x = 3E123")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'3E123\'       (1, 4) (1, 9)\n    >>> dump_tokens("x+y = 3e-1230")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'+\'           (1, 1) (1, 2)\n    NAME       \'y\'           (1, 2) (1, 3)\n    OP         \'=\'           (1, 4) (1, 5)\n    NUMBER     \'3e-1230\'     (1, 6) (1, 13)\n    >>> dump_tokens("x = 3.14e159")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'3.14e159\'    (1, 4) (1, 12)\n\nString literals\n\n    >>> dump_tokens("x = \'\'; y = \\"\\"")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     "\'\'"          (1, 4) (1, 6)\n    OP         \';\'           (1, 6) (1, 7)\n    NAME       \'y\'           (1, 8) (1, 9)\n    OP         \'=\'           (1, 10) (1, 11)\n    STRING     \'""\'          (1, 12) (1, 14)\n    >>> dump_tokens("x = \'\\"\'; y = \\"\'\\"")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     \'\\\'"\\\'\'       (1, 4) (1, 7)\n    OP         \';\'           (1, 7) (1, 8)\n    NAME       \'y\'           (1, 9) (1, 10)\n    OP         \'=\'           (1, 11) (1, 12)\n    STRING     \'"\\\'"\'        (1, 13) (1, 16)\n    >>> dump_tokens("x = \\"doesn\'t \\"shrink\\", does it\\"")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     \'"doesn\\\'t "\' (1, 4) (1, 14)\n    NAME       \'shrink\'      (1, 14) (1, 20)\n    STRING     \'", does it"\' (1, 20) (1, 31)\n    >>> dump_tokens("x = u\'abc\' + U\'ABC\'")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     "u\'abc\'"      (1, 4) (1, 10)\n    OP         \'+\'           (1, 11) (1, 12)\n    STRING     "U\'ABC\'"      (1, 13) (1, 19)\n    >>> dump_tokens(\'y = u"ABC" + U"ABC"\')\n    NAME       \'y\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     \'u"ABC"\'      (1, 4) (1, 10)\n    OP         \'+\'           (1, 11) (1, 12)\n    STRING     \'U"ABC"\'      (1, 13) (1, 19)\n    >>> dump_tokens("x = ur\'abc\' + Ur\'ABC\' + uR\'ABC\' + UR\'ABC\'")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     "ur\'abc\'"     (1, 4) (1, 11)\n    OP         \'+\'           (1, 12) (1, 13)\n    STRING     "Ur\'ABC\'"     (1, 14) (1, 21)\n    OP         \'+\'           (1, 22) (1, 23)\n    STRING     "uR\'ABC\'"     (1, 24) (1, 31)\n    OP         \'+\'           (1, 32) (1, 33)\n    STRING     "UR\'ABC\'"     (1, 34) (1, 41)\n    >>> dump_tokens(\'y = ur"abc" + Ur"ABC" + uR"ABC" + UR"ABC"\')\n    NAME       \'y\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    STRING     \'ur"abc"\'     (1, 4) (1, 11)\n    OP         \'+\'           (1, 12) (1, 13)\n    STRING     \'Ur"ABC"\'     (1, 14) (1, 21)\n    OP         \'+\'           (1, 22) (1, 23)\n    STRING     \'uR"ABC"\'     (1, 24) (1, 31)\n    OP         \'+\'           (1, 32) (1, 33)\n    STRING     \'UR"ABC"\'     (1, 34) (1, 41)\n\nOperators\n\n    >>> dump_tokens("def d22(a, b, c=2, d=2, *k): pass")\n    NAME       \'def\'         (1, 0) (1, 3)\n    NAME       \'d22\'         (1, 4) (1, 7)\n    OP         \'(\'           (1, 7) (1, 8)\n    NAME       \'a\'           (1, 8) (1, 9)\n    OP         \',\'           (1, 9) (1, 10)\n    NAME       \'b\'           (1, 11) (1, 12)\n    OP         \',\'           (1, 12) (1, 13)\n    NAME       \'c\'           (1, 14) (1, 15)\n    OP         \'=\'           (1, 15) (1, 16)\n    NUMBER     \'2\'           (1, 16) (1, 17)\n    OP         \',\'           (1, 17) (1, 18)\n    NAME       \'d\'           (1, 19) (1, 20)\n    OP         \'=\'           (1, 20) (1, 21)\n    NUMBER     \'2\'           (1, 21) (1, 22)\n    OP         \',\'           (1, 22) (1, 23)\n    OP         \'*\'           (1, 24) (1, 25)\n    NAME       \'k\'           (1, 25) (1, 26)\n    OP         \')\'           (1, 26) (1, 27)\n    OP         \':\'           (1, 27) (1, 28)\n    NAME       \'pass\'        (1, 29) (1, 33)\n    >>> dump_tokens("def d01v_(a=1, *k, **w): pass")\n    NAME       \'def\'         (1, 0) (1, 3)\n    NAME       \'d01v_\'       (1, 4) (1, 9)\n    OP         \'(\'           (1, 9) (1, 10)\n    NAME       \'a\'           (1, 10) (1, 11)\n    OP         \'=\'           (1, 11) (1, 12)\n    NUMBER     \'1\'           (1, 12) (1, 13)\n    OP         \',\'           (1, 13) (1, 14)\n    OP         \'*\'           (1, 15) (1, 16)\n    NAME       \'k\'           (1, 16) (1, 17)\n    OP         \',\'           (1, 17) (1, 18)\n    OP         \'**\'          (1, 19) (1, 21)\n    NAME       \'w\'           (1, 21) (1, 22)\n    OP         \')\'           (1, 22) (1, 23)\n    OP         \':\'           (1, 23) (1, 24)\n    NAME       \'pass\'        (1, 25) (1, 29)\n\nComparison\n\n    >>> dump_tokens("if 1 < 1 > 1 == 1 >= 5 <= 0x15 <= 0x12 != " +\n    ...             "1 and 5 in 1 not in 1 is 1 or 5 is not 1: pass")\n    NAME       \'if\'          (1, 0) (1, 2)\n    NUMBER     \'1\'           (1, 3) (1, 4)\n    OP         \'<\'           (1, 5) (1, 6)\n    NUMBER     \'1\'           (1, 7) (1, 8)\n    OP         \'>\'           (1, 9) (1, 10)\n    NUMBER     \'1\'           (1, 11) (1, 12)\n    OP         \'==\'          (1, 13) (1, 15)\n    NUMBER     \'1\'           (1, 16) (1, 17)\n    OP         \'>=\'          (1, 18) (1, 20)\n    NUMBER     \'5\'           (1, 21) (1, 22)\n    OP         \'<=\'          (1, 23) (1, 25)\n    NUMBER     \'0x15\'        (1, 26) (1, 30)\n    OP         \'<=\'          (1, 31) (1, 33)\n    NUMBER     \'0x12\'        (1, 34) (1, 38)\n    OP         \'!=\'          (1, 39) (1, 41)\n    NUMBER     \'1\'           (1, 42) (1, 43)\n    NAME       \'and\'         (1, 44) (1, 47)\n    NUMBER     \'5\'           (1, 48) (1, 49)\n    NAME       \'in\'          (1, 50) (1, 52)\n    NUMBER     \'1\'           (1, 53) (1, 54)\n    NAME       \'not\'         (1, 55) (1, 58)\n    NAME       \'in\'          (1, 59) (1, 61)\n    NUMBER     \'1\'           (1, 62) (1, 63)\n    NAME       \'is\'          (1, 64) (1, 66)\n    NUMBER     \'1\'           (1, 67) (1, 68)\n    NAME       \'or\'          (1, 69) (1, 71)\n    NUMBER     \'5\'           (1, 72) (1, 73)\n    NAME       \'is\'          (1, 74) (1, 76)\n    NAME       \'not\'         (1, 77) (1, 80)\n    NUMBER     \'1\'           (1, 81) (1, 82)\n    OP         \':\'           (1, 82) (1, 83)\n    NAME       \'pass\'        (1, 84) (1, 88)\n\nShift\n\n    >>> dump_tokens("x = 1 << 1 >> 5")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 4) (1, 5)\n    OP         \'<<\'          (1, 6) (1, 8)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \'>>\'          (1, 11) (1, 13)\n    NUMBER     \'5\'           (1, 14) (1, 15)\n\nAdditive\n\n    >>> dump_tokens("x = 1 - y + 15 - 01 + 0x124 + z + a[5]")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 4) (1, 5)\n    OP         \'-\'           (1, 6) (1, 7)\n    NAME       \'y\'           (1, 8) (1, 9)\n    OP         \'+\'           (1, 10) (1, 11)\n    NUMBER     \'15\'          (1, 12) (1, 14)\n    OP         \'-\'           (1, 15) (1, 16)\n    NUMBER     \'01\'          (1, 17) (1, 19)\n    OP         \'+\'           (1, 20) (1, 21)\n    NUMBER     \'0x124\'       (1, 22) (1, 27)\n    OP         \'+\'           (1, 28) (1, 29)\n    NAME       \'z\'           (1, 30) (1, 31)\n    OP         \'+\'           (1, 32) (1, 33)\n    NAME       \'a\'           (1, 34) (1, 35)\n    OP         \'[\'           (1, 35) (1, 36)\n    NUMBER     \'5\'           (1, 36) (1, 37)\n    OP         \']\'           (1, 37) (1, 38)\n\nMultiplicative\n\n    >>> dump_tokens("x = 1//1*1/5*12%0x12")\n    NAME       \'x\'           (1, 0) (1, 1)\n    OP         \'=\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 4) (1, 5)\n    OP         \'//\'          (1, 5) (1, 7)\n    NUMBER     \'1\'           (1, 7) (1, 8)\n    OP         \'*\'           (1, 8) (1, 9)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \'/\'           (1, 10) (1, 11)\n    NUMBER     \'5\'           (1, 11) (1, 12)\n    OP         \'*\'           (1, 12) (1, 13)\n    NUMBER     \'12\'          (1, 13) (1, 15)\n    OP         \'%\'           (1, 15) (1, 16)\n    NUMBER     \'0x12\'        (1, 16) (1, 20)\n\nUnary\n\n    >>> dump_tokens("~1 ^ 1 & 1 |1 ^ -1")\n    OP         \'~\'           (1, 0) (1, 1)\n    NUMBER     \'1\'           (1, 1) (1, 2)\n    OP         \'^\'           (1, 3) (1, 4)\n    NUMBER     \'1\'           (1, 5) (1, 6)\n    OP         \'&\'           (1, 7) (1, 8)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \'|\'           (1, 11) (1, 12)\n    NUMBER     \'1\'           (1, 12) (1, 13)\n    OP         \'^\'           (1, 14) (1, 15)\n    OP         \'-\'           (1, 16) (1, 17)\n    NUMBER     \'1\'           (1, 17) (1, 18)\n    >>> dump_tokens("-1*1/1+1*1//1 - ---1**1")\n    OP         \'-\'           (1, 0) (1, 1)\n    NUMBER     \'1\'           (1, 1) (1, 2)\n    OP         \'*\'           (1, 2) (1, 3)\n    NUMBER     \'1\'           (1, 3) (1, 4)\n    OP         \'/\'           (1, 4) (1, 5)\n    NUMBER     \'1\'           (1, 5) (1, 6)\n    OP         \'+\'           (1, 6) (1, 7)\n    NUMBER     \'1\'           (1, 7) (1, 8)\n    OP         \'*\'           (1, 8) (1, 9)\n    NUMBER     \'1\'           (1, 9) (1, 10)\n    OP         \'//\'          (1, 10) (1, 12)\n    NUMBER     \'1\'           (1, 12) (1, 13)\n    OP         \'-\'           (1, 14) (1, 15)\n    OP         \'-\'           (1, 16) (1, 17)\n    OP         \'-\'           (1, 17) (1, 18)\n    OP         \'-\'           (1, 18) (1, 19)\n    NUMBER     \'1\'           (1, 19) (1, 20)\n    OP         \'**\'          (1, 20) (1, 22)\n    NUMBER     \'1\'           (1, 22) (1, 23)\n\nSelector\n\n    >>> dump_tokens("import sys, time\\nx = sys.modules[\'time\'].time()")\n    NAME       \'import\'      (1, 0) (1, 6)\n    NAME       \'sys\'         (1, 7) (1, 10)\n    OP         \',\'           (1, 10) (1, 11)\n    NAME       \'time\'        (1, 12) (1, 16)\n    NEWLINE    \'\\n\'          (1, 16) (1, 17)\n    NAME       \'x\'           (2, 0) (2, 1)\n    OP         \'=\'           (2, 2) (2, 3)\n    NAME       \'sys\'         (2, 4) (2, 7)\n    OP         \'.\'           (2, 7) (2, 8)\n    NAME       \'modules\'     (2, 8) (2, 15)\n    OP         \'[\'           (2, 15) (2, 16)\n    STRING     "\'time\'"      (2, 16) (2, 22)\n    OP         \']\'           (2, 22) (2, 23)\n    OP         \'.\'           (2, 23) (2, 24)\n    NAME       \'time\'        (2, 24) (2, 28)\n    OP         \'(\'           (2, 28) (2, 29)\n    OP         \')\'           (2, 29) (2, 30)\n\nMethods\n\n    >>> dump_tokens("@staticmethod\\ndef foo(x,y): pass")\n    OP         \'@\'           (1, 0) (1, 1)\n    NAME       \'staticmethod (1, 1) (1, 13)\n    NEWLINE    \'\\n\'          (1, 13) (1, 14)\n    NAME       \'def\'         (2, 0) (2, 3)\n    NAME       \'foo\'         (2, 4) (2, 7)\n    OP         \'(\'           (2, 7) (2, 8)\n    NAME       \'x\'           (2, 8) (2, 9)\n    OP         \',\'           (2, 9) (2, 10)\n    NAME       \'y\'           (2, 10) (2, 11)\n    OP         \')\'           (2, 11) (2, 12)\n    OP         \':\'           (2, 12) (2, 13)\n    NAME       \'pass\'        (2, 14) (2, 18)\n\nBackslash means line continuation, except for comments\n\n    >>> roundtrip("x=1+\\\\n"\n    ...           "1\\n"\n    ...           "# This is a comment\\\\n"\n    ...           "# This also\\n")\n    True\n    >>> roundtrip("# Comment \\\\nx = 0")\n    True\n\nTwo string literals on the same line\n\n    >>> roundtrip("\'\' \'\'")\n    True\n\nTest roundtrip on random python modules.\npass the \'-ucpu\' option to process the full directory.\n\n    >>>\n    >>> tempdir = os.path.dirname(f) or os.curdir\n    >>> testfiles = glob.glob(os.path.join(tempdir, "test*.py"))\n\n    >>> if not test_support.is_resource_enabled("cpu"):\n    ...     testfiles = random.sample(testfiles, 10)\n    ...\n    >>> for testfile in testfiles:\n    ...     if not roundtrip(open(testfile)):\n    ...         print "Roundtrip failed for file %s" % testfile\n    ...         break\n    ... else: True\n    True\n\nEvil tabs\n    >>> dump_tokens("def f():\\n\\tif x\\n        \\tpass")\n    NAME       \'def\'         (1, 0) (1, 3)\n    NAME       \'f\'           (1, 4) (1, 5)\n    OP         \'(\'           (1, 5) (1, 6)\n    OP         \')\'           (1, 6) (1, 7)\n    OP         \':\'           (1, 7) (1, 8)\n    NEWLINE    \'\\n\'          (1, 8) (1, 9)\n    INDENT     \'\\t\'          (2, 0) (2, 1)\n    NAME       \'if\'          (2, 1) (2, 3)\n    NAME       \'x\'           (2, 4) (2, 5)\n    NEWLINE    \'\\n\'          (2, 5) (2, 6)\n    INDENT     \'        \\t\'  (3, 0) (3, 9)\n    NAME       \'pass\'        (3, 9) (3, 13)\n    DEDENT     \'\'            (4, 0) (4, 0)\n    DEDENT     \'\'            (4, 0) (4, 0)\n'
from test import test_support
from tokenize import untokenize, generate_tokens, NUMBER, NAME, OP, STRING, ENDMARKER, tok_name
from StringIO import StringIO
import os

def dump_tokens(s):
    """Print out the tokens in s in a table format.
    
    The ENDMARKER is omitted.
    """
    f = StringIO(s)
    for type, token, start, end, line in generate_tokens(f.readline):
        if type == ENDMARKER:
            break
        type = tok_name[type]
        print '%(type)-10.10s %(token)-13.13r %(start)s %(end)s' % locals()


def decistmt(s):
    """Substitute Decimals for floats in a string of statements.
    
    >>> from decimal import Decimal
    >>> s = 'print +21.3e-5*-.1234/81.7'
    >>> decistmt(s)
    "print +Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7')"
    
    The format of the exponent is inherited from the platform C library.
    Known cases are "e-007" (Windows) and "e-07" (not Windows).  Since
    we're only showing 12 digits, and the 13th isn't close to 5, the
    rest of the output should be platform-independent.
    
    >>> exec(s) #doctest: +ELLIPSIS
    -3.21716034272e-0...7
    
    Output from calculations with Decimal should be identical across all
    platforms.
    
    >>> exec(decistmt(s))
    -3.217160342717258261933904529E-7
    """
    result = []
    g = generate_tokens(StringIO(s).readline)
    for toknum, tokval, _, _, _ in g:
        if toknum == NUMBER and '.' in tokval:
            result.extend([(NAME, 'Decimal'),
             (OP, '('),
             (STRING, repr(tokval)),
             (OP, ')')])
        else:
            result.append((toknum, tokval))

    return untokenize(result)


__test__ = {'doctests': doctests,
 'decistmt': decistmt}

def test_main():
    from test import test_tokenize
    test_support.run_doctest(test_tokenize, True)


if __name__ == '__main__':
    test_main()